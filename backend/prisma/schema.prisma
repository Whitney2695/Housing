// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID    String     @id @default(uuid()) @db.Uuid
  Name      String
  Email     String     @unique
  Password  String
  Role      UserRole   @default(user)
  CreatedAt DateTime   @default(now())
  ProfileImageUrl    String? 
  Feedbacks Feedback[] @relation("UserFeedbacks")
  Mortgages Mortgage[] @relation("UserMortgages")
  ResetCode         String?  // Add this line
  ResetCodeExpiry   DateTime? // Add this line

  Developer Developer? 
}

enum UserRole {
  user
  admin
  developer
  government_official
}

model Developer {
  DeveloperID String    @id @default(uuid()) @db.Uuid
  Name        String
  ContactInfo String
  UserID      String    @unique @db.Uuid // Make UserID required
  User        User      @relation(fields: [UserID], references: [UserID])
  Projects    Project[] @relation("DeveloperProjects")
}

model Project {
  ProjectID           String        @id @default(uuid()) @db.Uuid
  Title               String
  Description         String
  Status              ProjectStatus @default(Planned)
  ProgressPercentage  Int           @default(0)
  EligibilityCriteria Json
  MinCreditScore      Int
  InterestRate        Float
  Price               Float? 
  ProjectImageUrl     String? 
  DeveloperID         String        @db.Uuid // Ensure this is uuid
  Location            String? 
  StartDate           DateTime?
  CreatedAt           DateTime      @default(now())
  Developer           Developer     @relation("DeveloperProjects", fields: [DeveloperID], references: [DeveloperID])
  Feedbacks           Feedback[]    @relation("ProjectFeedbacks")
  Mortgages           Mortgage[]    @relation("ProjectMortgages")
  GIS_Locations       GISLocation[]
}

enum ProjectStatus {
  Planned
  InProgress
  Completed
}

model GISLocation {
  GISID     String  @id @default(uuid()) @db.Uuid
  ProjectID String  @db.Uuid // Ensure this is uuid
  Latitude  Float
  Longitude Float
  Project   Project @relation(fields: [ProjectID], references: [ProjectID])
}

model Feedback {
  FeedbackID    String   @id @default(uuid()) @db.Uuid
  UserID        String   @db.Uuid
  ProjectID     String   @db.Uuid
  Comments      String
  Rating        Int // Removed the @db.Check directive
  DateSubmitted DateTime @default(now())
  User          User     @relation("UserFeedbacks", fields: [UserID], references: [UserID])
  Project       Project  @relation("ProjectFeedbacks", fields: [ProjectID], references: [ProjectID])
}

model Mortgage {
  MortgageID     String   @id @default(uuid()) @db.Uuid
  UserID         String   @db.Uuid // Ensure this is @db.Uuid
  Income         Float
  LoanAmount     Float
  InterestRate   Float
  LoanTermYears  Int
  MonthlyPayment Float?
  TotalPayment   Float?
  TotalInterest  Float?
  CreditScore    Int
  IsEligible     Boolean  @default(false)
  Notes          String?
  CalculatedAt   DateTime @default(now())
  User           User     @relation("UserMortgages", fields: [UserID], references: [UserID])

  projectId String?  @db.Uuid
  project   Project? @relation("ProjectMortgages", fields: [projectId], references: [ProjectID]) // Change references to 'ProjectID'
}
